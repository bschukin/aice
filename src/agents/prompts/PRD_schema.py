from __future__ import annotations
from typing import List, Optional
from pydantic import BaseModel, Field
from datetime import date, datetime

# СХЕМА ДОКУМЕНТА PRD

"""
Модуль для описания документа требований к программному продукту
(PRD - project requirements document).

Содержит модели:
- PRDPassport: Метаданные документа (версия, дата создания и т.д.).
- Requirement: Базовое требование с иерархией зависимостей.
- SystemRequirements: Группировка системных требований (безопасность, производительность и др.).
- PRD: Корневая модель документа.

**Назначение документа PRD:** 
- хранение в формализованном, непротиворечивом, неизбытычном виде требований Заказчика к продукту, 
для дальнейшего использования при проектировании. 
- документ составляется на основе диалогов с пользователем и информации извлеченной из переданных файлов.

**Наставления:**
При ведении документа не требуется "предпроектирования" и попыток осмыслить структуру будущей системы. 
Достаточно и плоского списка требований. Однако, если удастся группировать требования в иерархии - это будет хорошо.

В требования должно попадать только то, что относится к реализуемой системе или к процессам ее реализации.

ВАЖНО: В PRD должны попадать только требования, предложенные или одобренные ЯВНО Заказчиком (в диалоге). 
СТРОГО ЗАПРЕЩАЕТСЯ: вносить в PRD требования без предварительного согласования с Заказчиком.

Раздел "Функциональные требования" на начальных этапах не имеет собственной внутренней структуры - только список требований.
На последующих этапах, Архитектор (не Аналитик!) может создать в "Функциональных требованиях" разделы,
соответствующие функциональной структуре приложения.   

Раздел "Системные требования" имеет собственные подразделы для различных видов нефункциональных требований (безопасность, нагрузка и т.п.).
  

Каждое требование имеет формат: 
    - Код требования:
        - Префикс вида требования  (FR-функциональные требования, SR - системные)  
        - Фасетный (составной) номер требования. Номер может быть составным, если требуется сделать иерархию.
          Числовой код первого уровня - в формате 000 (три цифры с трейлинг-нулями). 
          Коды следующих уровней в формате 00 (2 цифры с трейлинг-нулем).
          Вложенные (зависимые требования) включают код родительского требования. 
          Пример: FR.001, FR.002.11, SR.003.14.15.
    -  Формулировка требования. Требование должно записываться кратко, 
        но без потери информации, которая может послужить в дальнейшем при проектировании и разработке системы.  

**Рекомендации по группировке требований внутри раздела**
Варианты группировки требований (допускаются группировки внутри группировок):
- по теме (включает 5-10 связанных сущностей)
- по сущностям
- по функциям

и еще раз:  Требования должны строго соответствовать диалогу и не содержать твоих (ИИ-агента) домыслов!
Не добавляй ничего от себя (даже если это кажется логичным).  

"""

class PRDPassport(BaseModel):
    """
    Шапка Документа проектных требований.
    Содержит характеристику проекта и самого документа.
    """
    project: str = Field(description="Наименование проекта")
    client: str = Field(description="Заказчик", default="Нет информации")
    date_started: Optional[date] = Field(description="Дата начала")
    version: int = Field(description="Версия документа", default=0)
    last_change: datetime = Field(description="Последнее изменение")


class Requirement(BaseModel):
    """"
    Требование
    """
    code: str = Field(
        description="Фасетный (составной) номер требования. Номер может быть составным, если создается иерархия")
    value:str = Field(description="Формулировка требования")
    dependent_reqs: Optional[List[Requirement]] = (
        Field(description="Зависимые (вложенные) требования. Если коллекция пуста - ЗАПРЕЩАЕТСЯ выводить данное поле в json", min_length=1))

class FunctionalRequirements(BaseModel):
    """
     <!-- Нумерованный список функциональных требований к программному продукту.
        Префикс номера - FR.
        Зависимые требования должны лежать в завимисой коллекции требования (dependent_reqs).
        Требования должны быть отсортированы по номеру.
        Требования должны групппироваться по тематике (если это возможно).

    Примеры иерархической структуры требований:

    FR.001: [Текст требования. Сжато. Емко. Точно.]
    FR.002: [Текст требования. Сжато. Емко. Точно.]
    ....
    FR.00N: [Текст требования. Сжато. Емко. Точно.]
        FR.001.01: [Текст зависимого требования. Сжато. Емко. Точно.]
            FR.001.01.01: [Текст зависимого требования. Сжато. Емко. Точно.]

    Примеры функциональных требований:

    FR.001: Система должна учитывать все транспортные средства (ТС) компании.
    FR.002: Система должна фиксировать техническое состояние ТС.
        FR.002.01: Для каждого ТС должны храниться: пробег, дата последнего ТО, список неисправностей.

    FR.003: Система должна назначать водителей на рейсы.
        FR.003.01: Водитель не может быть назначен, если его стаж менее 1 года.

    FR.004: Система должна формировать путевые листы.
        FR.004.01: Путевой лист включает: маршрут, ФИО водителя, дату, список грузов.
    """
    reqs: Optional[List[Requirement]] = Field(description="Требования по безопасности")


class SystemRequirements(BaseModel):
    """
    Системные требования - нумерованный списки нефункциональных требований различных типов к программному продукту.
    Префикс номера требования - SR.
    Аналитик должен самостоятельно выбирать раздел, к которому относится требование.
    Нумерация требований - единая для всего раздела.

    ЗАПРЕЩЕНО добавлять требования неозвученные заказчиком в диалоге.
    ИИ-Агент может предлагать свои требования в поле for_human ответа (объект класса AgentResponse).
    """
    security: Optional[List[Requirement]] = Field(description="Требования по безопасности")
    performance: Optional[List[Requirement]] = Field(description="Требования по производительности")
    monitoring: Optional[List[Requirement]] = Field(description="Требования к мониторингу")
    deployment: Optional[List[Requirement]] = Field(description="Требования к развертыванию")
    ui: Optional[List[Requirement]] = Field(description="Требования к пользовательскому интерфейсе, эргономике, UI, UX")


class PRD(BaseModel):
    """
       Project Requirements Document (Список требований к программному продукту, реализуемый в проекте)
    """
    passport: PRDPassport = Field(description="Шапка документа")
    functional_requirements: Optional[FunctionalRequirements] = Field(description="Функциональные требования")
    system_requirements: Optional[SystemRequirements] = Field(description="Системные требования")


## Пример, json cгенерированного по класса PRD для программного продукта Автобаза
